// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package source

import (
	"fmt"
	"io"
	"strconv"

	"github.com/zhanghup/go-app/beans"
)

type Message struct {
	Target   MessageEnum     `json:"target"`
	Messages []beans.MsgInfo `json:"messages"`
}

type NewMessageConfirm struct {
	// 确认备注
	Remark *string `json:"remark"`
}

type MessageEnum string

const (
	MessageEnumWeb MessageEnum = "web"
	MessageEnumApp MessageEnum = "app"
)

var AllMessageEnum = []MessageEnum{
	MessageEnumWeb,
	MessageEnumApp,
}

func (e MessageEnum) IsValid() bool {
	switch e {
	case MessageEnumWeb, MessageEnumApp:
		return true
	}
	return false
}

func (e MessageEnum) String() string {
	return string(e)
}

func (e *MessageEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MessageEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MessageEnum", str)
	}
	return nil
}

func (e MessageEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
